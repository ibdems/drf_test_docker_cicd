# Nom de la pipeline
name: Task CI/CD Pipeline

# Déclenchement de la pipeline
on:
  # Lors d'un push dans n'importe quelle branche
  push:
    branches:
      - "*"
  # Lors de la création ou la modification d'une pull request
  pull_request:
    branches:
      - "*"

# Définition des jobs
jobs:
  # Job 1 : Vérifier la syntaxe du code avec flake8
  check_syntaxe:
    # Définir l'environnement sur lequel le job s'exécute
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]  # Permet d'ajouter d'autres versions Python à tester si nécessaire

    steps:
      # Étape 1 : Télécharger le code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Étape 4 : Analyser le code avec flake8
      - name: Check lint code with flake8
        run: |
          pip install flake8
          flake8 . --max-line-length=85  # Configure la limite de longueur des lignes à 85 caractères

  # Job 2 : Lancer les tests unitaires
  test:
    runs-on: ubuntu-latest
    needs: check_syntaxe  # Le job "test" dépend du succès de "check_syntaxe"
    services:
      postgres:  # Configurer un service PostgreSQL pour les tests
        image: postgres:15.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgre
          POSTGRES_DB: task_test
        ports:
          - 5432:5432  # Port exposé
    steps:
      # Étape 1 : Télécharger le code source
      - uses: actions/checkout@v2

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      # Étape 3 : Installer les dépendances nécessaires pour les tests
      - name: Install dependencies
        run: |
          make install_dev  # Commande personnalisée pour installer les dépendances de développement

      # Étape 4 : Exécuter les tests unitaires
      - name: Run tests
        run: |
          make test  # Commande personnalisée pour exécuter les tests unitaires

  # Job 3 : Construire et pousser une image Docker
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test  # Le job "build" dépend du succès de "test"
    steps:
      # Étape 1 : Télécharger le code source
      - uses: actions/checkout@v2

      # Étape 2 : Se connecter à Docker Hub
      - name: Login to Docker Hub
        env:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Nom d'utilisateur Docker Hub
          password: ${{ secrets.DOCKERHUB_PASSWORD }}  # Mot de passe Docker Hub
        run: docker login -u $username -p $password

      # Étape 3 : Construire l'image Docker
      - name: Build the Docker image
        run: docker build . -t devibrahima/task-essaie:latest

      # Étape 4 : Pousser l'image dans le registre Docker
      - name: Push Docker image to registry
        run: docker push devibrahima/task-essaie:latest